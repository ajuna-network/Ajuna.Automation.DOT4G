//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Ajuna.NetApi;
using Ajuna.NetApi.Model.Extrinsics;
using Ajuna.NetApi.Model.Meta;
using Ajuna.NetApi.Model.Types;
using Ajuna.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace AjunaNET.NetApiExt.Generated.Storage
{
    
    
    public sealed class AjunaBoardStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        public AjunaBoardStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AjunaBoard", "NextBoardId"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AjunaBoard", "BoardGames"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Ajuna.NetApi.Model.Types.Primitive.U32), typeof(AjunaNET.NetApiExt.Generated.Model.pallet_ajuna_board.types.BoardGame)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AjunaBoard", "PlayerBoards"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                            Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(AjunaNET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AjunaBoard", "Seed"), new System.Tuple<Ajuna.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Ajuna.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> NextBoardIdParams
        /// </summary>
        public static string NextBoardIdParams()
        {
            return RequestGenerator.GetStorage("AjunaBoard", "NextBoardId", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> NextBoardId
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> NextBoardId(CancellationToken token)
        {
            string parameters = AjunaBoardStorage.NextBoardIdParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> BoardGamesParams
        /// </summary>
        public static string BoardGamesParams(Ajuna.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("AjunaBoard", "BoardGames", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BoardGames
        /// </summary>
        public async Task<AjunaNET.NetApiExt.Generated.Model.pallet_ajuna_board.types.BoardGame> BoardGames(Ajuna.NetApi.Model.Types.Primitive.U32 key, CancellationToken token)
        {
            string parameters = AjunaBoardStorage.BoardGamesParams(key);
            return await _client.GetStorageAsync<AjunaNET.NetApiExt.Generated.Model.pallet_ajuna_board.types.BoardGame>(parameters, token);
        }
        
        /// <summary>
        /// >> PlayerBoardsParams
        ///  Players in boards
        /// </summary>
        public static string PlayerBoardsParams(AjunaNET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("AjunaBoard", "PlayerBoards", Ajuna.NetApi.Model.Meta.Storage.Type.Map, new Ajuna.NetApi.Model.Meta.Storage.Hasher[] {
                        Ajuna.NetApi.Model.Meta.Storage.Hasher.Identity}, new Ajuna.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PlayerBoards
        ///  Players in boards
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> PlayerBoards(AjunaNET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, CancellationToken token)
        {
            string parameters = AjunaBoardStorage.PlayerBoardsParams(key);
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
        
        /// <summary>
        /// >> SeedParams
        ///  Random seed
        /// </summary>
        public static string SeedParams()
        {
            return RequestGenerator.GetStorage("AjunaBoard", "Seed", Ajuna.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> Seed
        ///  Random seed
        /// </summary>
        public async Task<Ajuna.NetApi.Model.Types.Primitive.U32> Seed(CancellationToken token)
        {
            string parameters = AjunaBoardStorage.SeedParams();
            return await _client.GetStorageAsync<Ajuna.NetApi.Model.Types.Primitive.U32>(parameters, token);
        }
    }
    
    public sealed class AjunaBoardCalls
    {
        
        /// <summary>
        /// >> queue
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Queue()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(24, "AjunaBoard", 0, "queue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> play
        /// Contains one variant per dispatchable that can be called by an extrinsic.
        /// </summary>
        public static Method Play(AjunaNET.NetApiExt.Generated.Model.pallet_ajuna_board.dot4gravity.EnumTurn turn)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(turn.Encode());
            return new Method(24, "AjunaBoard", 1, "play", byteArray.ToArray());
        }
    }
    
    public enum AjunaBoardErrors
    {
        
        /// <summary>
        /// >> InvalidGameState
        /// </summary>
        InvalidGameState,
        
        /// <summary>
        /// >> InvalidTurn
        /// </summary>
        InvalidTurn,
        
        /// <summary>
        /// >> InvalidPlayers
        /// </summary>
        InvalidPlayers,
        
        /// <summary>
        /// >> NotPlaying
        /// </summary>
        NotPlaying,
        
        /// <summary>
        /// >> AlreadyInGame
        /// </summary>
        AlreadyInGame,
        
        /// <summary>
        /// >> AlreadyQueued
        /// </summary>
        AlreadyQueued,
        
        /// <summary>
        /// >> UnknownBoard
        /// </summary>
        UnknownBoard,
    }
}
